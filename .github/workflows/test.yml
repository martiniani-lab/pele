name: Tests

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

env:
  BUILD_TYPE: Release

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-latest]
        python-version: ["3.10"]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-12 g++-12 gfortran-12 libblas-dev liblapack-dev liblapacke-dev cmake libsuitesparse-dev lcov
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 100
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-12 100
          sudo update-alternatives --install /usr/bin/gfortran gfortran /usr/bin/gfortran-12 100

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew list gcc@13 || brew install gcc@13
          brew list cmake || brew install cmake
          brew list openblas || brew install openblas
          brew list gettext || brew install gettext
          brew list suite-sparse || brew install suite-sparse

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip wheel
          # Use modern setuptools and avoid any legacy dependencies
          pip install "setuptools>=65" "build>=0.8"
          # Install numpy with modern setuptools support
          pip install "numpy>=1.24" "scipy>=1.9"
          pip install matplotlib networkx "cython>=3.0"
          pip install "sqlalchemy>=1.4,<2.0" munkres scikit-sparse
          pip install pytest future pyyaml packaging
          # Install coverage tools
          pip install pytest-cov coverage
          
      - name: Install omp-thread-count (with compiler)
        run: |
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            CC=gcc-13 pip install omp-thread-count
          else
            pip install omp-thread-count
          fi

      - name: Get submodules
        run: git submodule update --init --recursive

      - name: Install sundials (Linux)
        if: matrix.os == 'ubuntu-22.04'
        run: |
          cd extern
          chmod +x sun_inst.sh
          ./sun_inst.sh Debug
          cd ..

      - name: Install sundials (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          cd extern
          chmod +x sun_inst.sh
          MACOSX_DEPLOYMENT_TARGET=12.0 CC=gcc-13 CXX=g++-13 ./sun_inst.sh Debug
          cd ..

      - name: Install Eigen
        run: |
          cd extern
          cp -r eigen/Eigen install/include

      - name: Build C++ tests with coverage (Linux)
        if: matrix.os == 'ubuntu-22.04'
        run: |
          cd cpp_tests/source 
          cmake -DCMAKE_BUILD_TYPE=Coverage -DCMAKE_CXX_FLAGS_COVERAGE="-g -O0 --coverage -fprofile-arcs -ftest-coverage" -DCMAKE_C_FLAGS_COVERAGE="-g -O0 --coverage -fprofile-arcs -ftest-coverage" .
          make -j4

      - name: Build C++ tests (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          cd cpp_tests/source
          cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_COMPILER=gcc-13 -DCMAKE_CXX_COMPILER=g++-13 -DCMAKE_PREFIX_PATH=$(brew --prefix openblas) .
          make -j4

      - name: Run C++ tests
        run: |
          cd cpp_tests/source
          ./test_main

      - name: Generate C++ coverage (Linux)
        if: matrix.os == 'ubuntu-22.04'
        run: |
          cd cpp_tests/source
          # Use CMake coverage target
          make pele_tests_coverage
          # Generate manual coverage if the target doesn't exist
          if [ ! -f coverage.info ]; then
            lcov --capture --directory . --output-file coverage.info
            # Remove external libraries from coverage
            lcov --remove coverage.info '/usr/*' --output-file coverage.info
            lcov --remove coverage.info '*/extern/*' --output-file coverage.info
            lcov --remove coverage.info '*/gtest/*' --output-file coverage.info
            lcov --remove coverage.info '*/googletest/*' --output-file coverage.info
          fi
          lcov --list coverage.info

      - name: Compile python library (Linux)
        if: matrix.os == 'ubuntu-22.04'
        run: |
          python setup_with_cmake.py build_ext -i

      - name: Compile python library (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          MACOSX_DEPLOYMENT_TARGET=12.0 python setup_with_cmake.py build_ext -i

      - name: Run python tests with coverage
        run: |
          export OMP_NUM_THREADS=1
          pytest pele/ -v --cov=pele --cov-report=xml --cov-report=term-missing

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.os == 'ubuntu-22.04'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml,./cpp_tests/source/coverage.info
          flags: python,cpp
          name: codecov-umbrella
          fail_ci_if_error: false



