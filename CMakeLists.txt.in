# this file is meant to be parsed by python before being a proper CMakeLists.txt file
# in particular, the following strings will be set to their proper values by python when
# making CMakeLists.txt

cmake_minimum_required(VERSION 3.18)

project(pele)
message("${CMAKE_C_COMPILER}")
message("${CMAKE_CXX_COMPILER}")
set(numpy_include __NUMPY_INCLUDE__)
set(PYTHON_INCLUDE_DIRS __PYTHON_INCLUDE__)
set(PYTHON_LDFLAGS "__PYTHON_LDFLAGS__")
set(INCLUDE_SUNDIALS __INCLUDE_SUNDIALS__)

message(PYTHON_LDFLAGS)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# osx makes the suffix for shared object libraries .dylib
IF(APPLE)
  SET(CMAKE_SHARED_LIBRARY_SUFFIX ".so")
ENDIF(APPLE)

set(EXT_INSTALL_PATH "${CMAKE_SOURCE_DIR}/extern/install")

# #################################### sundials #######################################
set(EXT_INCLUDE_DIR
  ${EXT_INSTALL_PATH}/include
  CACHE PATH "Location of header files")

if(INCLUDE_SUNDIALS)
  if(EXISTS "${EXT_INSTALL_PATH}/lib")
    set(SUNDIALS_LIBRARY_DIR
      ${EXT_INSTALL_PATH}/lib
      CACHE PATH "Location of SUNDIALS libraries")
  else()
    set(SUNDIALS_LIBRARY_DIR
      ${EXT_INSTALL_PATH}/lib64
      CACHE PATH "Location of SUNDIALS libraries")
  endif()

  # Find the SUNDIALS libraries
  find_library(SUNDIALS_SOLVER_LIB
    sundials_cvode PATHS ${SUNDIALS_LIBRARY_DIR} NO_DEFAULT_PATH
    DOC "CVODE library")

  find_library(SUNDIALS_NVEC_LIB
    sundials_nvecserial PATHS ${SUNDIALS_LIBRARY_DIR} NO_DEFAULT_PATH
    DOC "NVECTOR_SERIAL library")

  set(SUNDIALS_LIBRARIES
    -L${SUNDIALS_LIBRARY_DIR}
    ${SUNDIALS_SOLVER_LIB}
    ${SUNDIALS_NVEC_LIB}
    ${SUNDIALS_MANYVEC_LIB}
    ${SUNDIALS_EXTRA_LIBS})
endif()

# ####################################################################################
message("python include dirs: ${PYTHON_INCLUDE_DIRS}")
message("python ldflags: ${PYTHON_LDFLAGS}")
message("numpy include dirs: ${numpy_include}")
include_directories(${numpy_include})
include_directories(${PYTHON_INCLUDE_DIRS})

# note: We set CMAKE_SHARED_LINKER_FLAGS because I couldn't get it to work using
# target_link_librarires().  CMake kept interpreting the flag CoreFoundation
# as a library and appending -l to it and the compiler would complain
unset(CMAKE_SHARED_LINKER_FLAGS CACHE)
set(CMAKE_SHARED_LINKER_FLAGS ${PYTHON_LDFLAGS} CACHE STRING flags)

# LAPACK (this also searches for BLAS automatically)
find_package(LAPACK REQUIRED)

# PYTHON_LDFLAGS attempts to link against the gettext libintl library
# The gettext functions are not part of the C standard library on Apple
# See https://cmake.org/cmake/help/latest/module/FindIntl.html
if(APPLE)
  find_package(Intl REQUIRED)
  include_directories(${Intl_INCLUDE_DIRS})
  get_filename_component(Intl_LIBRARY_DIR ${Intl_LIBRARIES} DIRECTORY)
endif(APPLE)

# message(${BLAS_LIBRARIES})

# lapacke.h comes with Eigen
set(LAPACKE_INCLUDE_DIR
  ${CMAKE_SOURCE_DIR}/extern/install/include/Eigen/src/misc
  CACHE PATH "Location of lapacke include")

enable_language(CXX)
enable_language(Fortran)
find_package(PythonInterp REQUIRED)

SET(CMAKE_CXX_FLAGS __COMPILER_EXTRA_ARGS__)

# cmake_policy(SET CMP0015 NEW)

# set the pele include directory
set(pele_include ${CMAKE_CURRENT_SOURCE_DIR}/source)
message("pele include directory: ${pele_include}")

# build the pele library
# NOTE: GLOBBING MIGHT BE A BAD IDEA WHEN ADDING FILES https://stackoverflow.com/questions/1027247/is-it-better-to-specify-source-files-with-glob-or-each-file-individually-in-cmake
# This is a likely source of undefined symbol errors
FILE(GLOB pele_sources ${pele_include}/*.c*)

set(pele_sources
  ${pele_include}/aatopology.cpp
  ${pele_include}/atlj.cpp
  ${pele_include}/backtracking.cpp
  ${pele_include}/bracketing.cpp
  ${pele_include}/lbfgs.cpp
  ${pele_include}/linesearch.cpp
  ${pele_include}/modified_fire.cpp
  ${pele_include}/more_thuente.cpp
  ${pele_include}/nwpele.cpp
  ${pele_include}/pressure_tensor.cpp
  ${pele_include}/rotations.cpp
  ${pele_include}/xsum.c
  ${pele_include}/pbinary.c
)

set(cvode_pele_source
  ${pele_include}/cvode.cpp
  ${pele_include}/extended_mixed_descent.cpp
  ${pele_include}/mxd_end_only.cpp
  ${pele_include}/newton.cpp
  ${pele_include}/newton_with_extension.cpp
  ${pele_include}/generic_mixed_descent.cpp
)

if(INCLUDE_SUNDIALS)
  set(pele_sources ${pele_sources} ${cvode_pele_source})
endif()

include_directories(BEFORE SYSTEM ${pele_include})
include_directories(BEFORE SYSTEM ${EXT_INCLUDE_DIR})

if(INCLUDE_SUNDIALS)
  include_directories(BEFORE SYSTEM ${LAPACKE_INCLUDE_DIR})
  message("SUNDIALS LIBRARIES " ${SUNDIALS_LIBRARIES})
endif()

add_library(pele_lib SHARED ${pele_sources})
target_include_directories(pele_lib PUBLIC
    ${PYTHON_INCLUDE_DIRS}
    ${numpy_include}
)

# Ensure proper libstdc++ ABI consistency by explicitly linking with the compiler's libstdc++
target_link_libraries(pele_lib PUBLIC stdc++)
if(APPLE)
  target_link_libraries(pele_lib PUBLIC ${SUNDIALS_LIBRARIES})
  target_link_libraries(pele_lib PUBLIC ${LAPACK_LIBRARIES})
  target_link_directories(pele_lib PUBLIC ${Intl_LIBRARY_DIR})
endif(APPLE)

# Apple changed the ld linker in Xcode 15 which breaks pele.
# The classic linker can be chosen with -ld_classic flag.
# However, on older Xcode versions, this flag throws an error.
# Thus, we simply check here whether this flag exists.
# See https://www.scivision.dev/xcode-ld_classic/
# For the undefined flag, see
# https://github.com/nasa/cFE/issues/476#issuecomment-579436106
if(APPLE)
  include(CheckLinkerFlag)
  check_linker_flag(C "-ld_classic" CLASSIC_FLAG)
  if(CLASSIC_FLAG)
    set(APPLE_LINK_OPTIONS "LINKER:-undefined,dynamic_lookup,-ld_classic")
  else(CLASSIC_FLAG)
    set(APPLE_LINK_OPTIONS "LINKER:-undefined,dynamic_lookup")
  endif(CLASSIC_FLAG)
endif(APPLE)

function(make_cython_lib cython_cxx_source)
  get_filename_component(library_name ${cython_cxx_source} NAME)
  string(REGEX REPLACE "\\.c(xx)?$" "" library_name ${library_name})
  add_library(${library_name} SHARED ${cython_cxx_source})

  if(APPLE)
    target_link_options(${library_name} PUBLIC ${APPLE_LINK_OPTIONS})
  endif(APPLE)

  target_link_libraries(${library_name} PUBLIC pele_lib)

  if(INCLUDE_SUNDIALS)
    target_link_libraries(${library_name} PUBLIC ${SUNDIALS_LIBRARIES})
  endif()

  target_link_libraries(${library_name} PUBLIC ${LAPACK_LIBRARIES})
  set_target_properties(${library_name} PROPERTIES PREFIX "")
  set_target_properties(${library_name} PROPERTIES SUFFIX ".so")
  message("making library ${library_name} from source ${cython_cxx_source}")
endfunction(make_cython_lib)

function(make_fortran_lib fortran_source)
  get_filename_component(library_name ${fortran_source} NAME)
  string(REGEX REPLACE "\\.f90$" "" library_name ${library_name})
  
  # a bit of a hack to get the module name
  string(REPLACE "/" "." module_name ${fortran_source})
  string(REPLACE ".f90" "" module_name ${module_name})
  #remove the first part of the module name
  string(REGEX REPLACE "^[^.]*." "" module_name ${module_name})


  set(output_lib ${CMAKE_BINARY_DIR}/${library_name}.so)

  add_custom_command(
    OUTPUT ${output_lib}
    COMMAND ${PYTHON_EXECUTABLE} -m numpy.f2py -c ${fortran_source} -m ${library_name} --quiet
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
    DEPENDS ${fortran_source}
    COMMENT "Building Fortran module ${library_name} with f2py"
  )

  add_custom_target(
      ${library_name}_target ALL
      DEPENDS ${output_lib}
  )

  # This is a dummy library to make setuptools happy
  add_library(${library_name} SHARED IMPORTED)
  set_property(TARGET ${library_name} PROPERTY IMPORTED_LOCATION ${output_lib})
  set_property(TARGET ${library_name} APPEND PROPERTY IMPORTED_CONFIGURATIONS "NONE")
  set_property(TARGET ${library_name} PROPERTY IMPORTED_LOCATION_NONE ${output_lib})


  set_target_properties(${library_name} PROPERTIES PREFIX "")
  set_target_properties(${library_name} PROPERTIES SUFFIX ".so")
  message("making fortran library ${library_name} from source ${fortran_source}")
endfunction(make_fortran_lib)
